// Code generated by go-bindata.
// sources:
// tmpl/dashboard.tmpl
// tmpl/monitor.tmpl
// tmpl/screenboard.tmpl
// tmpl/timeboard.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplDashboardTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x57\x4d\x8f\xdb\x36\x10\x3d\xdb\xbf\x62\x60\xec\x31\x31\x7a\x2e\xe0\x43\x91\xc5\xa6\x05\xb6\x6d\x92\x35\xd2\x43\x51\x08\xcc\x6a\xec\x25\x40\x4b\x5a\x91\xde\xc4\x10\xf4\xdf\x0b\x7e\x48\x22\x45\x52\xa2\xdb\x24\xde\x2c\x2f\xb6\x38\xa3\xe1\x88\x7c\x6f\x86\xaf\x46\x5e\x1e\xeb\x7b\x84\x55\x4e\x04\xc9\xcb\x7d\x96\x13\xfe\xf0\xa9\x24\x75\xbe\x82\x55\x9e\x67\x4d\x03\xeb\xdf\x72\x68\xdb\x15\x34\x4b\x00\x41\x05\x43\x30\x63\x03\x2b\x69\xde\xaa\xb9\xb6\x5d\x2d\x01\x18\x39\x95\x47\x91\x89\x53\x85\xbd\xfd\x56\xcd\x6d\xe5\x94\x76\xa2\x3c\xab\x91\xe4\x59\x59\xb0\x13\x6c\x40\x2d\xc1\x3f\x20\xc9\xff\x94\x13\xaf\xdb\x76\x09\xd0\x34\xaf\xe1\x33\x15\x0f\xb0\xde\xe2\xa1\x62\x44\xe0\x47\x52\x53\xf2\x89\x21\x87\xb6\x6d\x9a\x9a\x14\x7b\x84\xb5\xf2\x15\xc6\x23\x7b\x32\x2e\x2a\x55\x80\x82\x1c\xd0\xca\xf3\x0f\xf9\xa8\x33\x00\xa8\x6a\xdc\xd1\x2f\xbd\xed\x9d\x7a\x5c\xbf\x45\xd1\x7b\xe4\xb8\x23\x47\x26\x3a\x8f\x6b\xfd\x68\xb9\xb4\x4d\x83\x45\xde\x76\x3f\x4e\xd2\x7f\xd1\x7c\x8f\x82\x9b\x59\x93\x2c\xa8\xc7\xcf\xca\x64\x52\x1c\xde\xb8\xc6\x1d\x2d\xa8\xa0\x65\x61\x76\xc0\x36\xbe\xad\xcb\x63\xa5\x63\x0e\x7e\xc6\x6b\x2f\x6d\x59\x3e\xbc\xae\x23\x77\x67\x15\x38\x24\x37\xb6\x49\xb5\x5f\xd5\x4b\x58\x0e\x27\xe9\xd9\xc4\x5d\x87\x6d\x59\x31\xca\xc5\x38\x7d\x70\x9c\x61\x6d\x00\x12\xfa\x92\xd9\xaf\x71\x17\xfc\x80\x8f\x47\xe4\xfa\x93\x5c\xa4\x74\xa3\xd6\x1e\xce\x02\x00\x8f\x5d\xf8\xf7\xa3\xd0\x3a\x38\xdd\xc1\xfa\x4e\x9c\x18\xea\xb8\x7a\x2d\x3d\xe1\x04\x07\xe0\x6a\xd2\x0d\x2e\x63\xc8\x08\xef\x08\x43\x21\xe4\x2b\x95\xf9\xd7\x41\xb0\x37\xac\xe4\x6a\x1d\xa6\xfc\x08\xb7\xb4\x40\xb3\x59\x8c\x16\xa8\xc9\xd6\x71\x6d\xb0\x45\xa2\x68\xb8\xea\x4f\xf0\xad\xdd\x77\xbe\x29\x8b\x5c\x9d\x01\x61\x37\x65\x7d\x20\x42\xb3\xae\xdb\xe1\xa8\xd9\x03\x8e\x1e\xf7\x83\x7f\xb6\x33\x2f\xf8\xdb\x03\xf6\xfe\x48\x2c\x2d\xb4\xa5\xdb\xa8\x81\xca\xd6\x5e\x79\x51\xd4\x47\x8f\x13\x90\x29\x1c\x2a\x52\x13\x51\xd6\x5d\x90\x37\xc3\x4c\x28\x8e\xca\xe6\x23\x61\x47\x74\x70\xad\xc7\x93\x9a\x07\x2b\x25\xed\x99\x9c\xd0\xa8\x78\xf8\x67\x11\xb7\x74\x67\xb4\xa5\x87\x11\xf2\x84\x9c\xd9\x8c\x76\x96\xd1\x27\xcc\x78\x45\x8a\x81\x3c\x07\x5c\xdf\xd2\x27\xbc\x93\x93\x6e\xc6\xad\x0f\x9a\xc0\x94\xc5\x6d\x7a\x40\x8e\x35\x45\xfe\xfd\xe9\x7d\x2e\xb9\xad\x31\xc1\x73\xb9\xb3\xd7\x94\x57\x8c\x9c\x54\xca\xe3\xb3\xcf\xb5\xcd\x61\x9d\xed\x1f\x25\x9e\x5b\x42\xbe\x42\x05\xf1\x51\x39\x10\x25\x95\x27\x73\x25\xc6\x5f\x63\xb2\xe4\x24\x2d\x92\x8e\xf9\x85\x0f\xf6\x85\x85\xf2\x05\x84\xe0\x1d\x47\xb6\x87\xeb\x18\xaa\xdf\x1f\xb1\x3e\x29\x42\x4f\xa1\xfa\x51\x7a\x65\xaa\x12\x5c\xb4\x69\xf5\x63\x06\xd5\xbf\xec\xf7\x35\xee\x55\xbd\x1b\x1f\x2b\x19\x4c\x26\x88\xe5\x1c\xea\x85\xcf\xbd\x73\xb8\x0e\x3f\x78\x03\x41\xc6\xe7\x43\xfc\xf4\x12\x1b\x4f\x8c\xa0\xbf\x96\x5c\xfc\x4e\xbc\x1b\xb1\x9d\xd4\x43\xc9\xc5\x81\x04\x2f\xc6\x90\xc6\xcc\x31\x31\x13\xc8\x38\x64\x78\x43\x19\x1b\x6f\xfd\x4e\xce\x8d\xc1\x3b\x71\xe9\x9c\x38\x9c\xcb\x9d\x4a\x8f\x6c\xa5\x49\x24\x2c\x95\x00\x81\x0d\xfc\xdd\x34\x57\xfa\xff\xcf\x1b\x63\x1e\x4a\xd9\x15\x2d\x72\xfc\xf2\x0a\xae\x90\xe1\xc1\x75\xa0\x3b\x63\x6d\xdb\x57\xe6\xf3\x56\x4d\xa3\x1c\xd5\x3f\x35\xf3\xcf\x44\x26\x77\xf7\xa5\x6e\x55\x5c\xfd\xd1\x99\xe8\xff\x72\x21\x65\x9e\xca\xa4\x77\xf8\xff\x99\x74\xf2\xc0\x32\xe9\x56\x3e\x3e\x06\xab\x24\xf5\x15\x40\xbd\x1d\x2d\x4d\xe6\x8d\x6c\xc7\x68\x15\x7c\xe3\x46\x1a\xce\x65\x95\x57\x0e\x6c\xff\x41\x2b\x8c\xf4\xe8\x8c\xa4\x9b\xb9\xef\x25\x0a\xd3\xe9\x8e\xe8\x13\x30\xc2\xa4\x74\xe9\xe6\x5f\xba\xa6\x2e\x5c\x89\x97\xad\x30\x5a\x26\x2e\x59\xa9\x17\xac\xd8\xd1\x86\xa4\xdd\x37\x68\xce\x73\x8d\x39\x2c\xe7\xa6\x3b\xf1\x22\xd2\xb5\xce\x68\xbd\x13\x6d\x37\xad\xe5\x06\x12\x98\x6c\x99\xe1\xd9\x70\x51\xf6\x0a\x72\x72\x31\xf6\x89\x69\x3f\x9e\xa3\xc7\xbe\x2e\x37\x53\x99\x69\x8d\x08\x49\xa7\x74\xd7\x7f\xd2\x5c\xc9\x7a\xeb\x65\xd0\xfe\x42\xb8\x5c\x86\xb2\x72\x16\x3d\x47\x56\xcd\x48\xaa\x6f\xd6\x38\x52\xc0\x19\x91\x4f\xc9\xd2\x29\x8e\xd0\xcb\x56\xe5\x10\xb4\x93\xb0\x7d\xc9\x1a\x1d\x90\x44\x13\x72\xe8\x47\xa9\xe9\x21\xd2\xcc\x48\x9d\x09\x99\x33\xc3\x96\xa8\xbc\xf1\x09\x12\x97\x35\x9e\xa4\x89\x5c\xc2\x22\x1b\xfc\x9d\xb6\xf6\xb9\x68\x96\xe7\xa1\x57\x22\x5a\xc5\xd7\x29\xe7\x69\x94\x73\xf5\x49\x1c\xfe\x51\x4d\xd2\x2e\xff\x0d\x00\x00\xff\xff\x71\x38\xb8\xf9\xb0\x1c\x00\x00")

func tmplDashboardTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplDashboardTmpl,
		"tmpl/dashboard.tmpl",
	)
}

func tmplDashboardTmpl() (*asset, error) {
	bytes, err := tmplDashboardTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/dashboard.tmpl", size: 7344, mode: os.FileMode(436), modTime: time.Unix(1596743989, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplMonitorTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\xcd\x6e\xdb\x3c\x10\xbc\xeb\x29\x16\x3a\x7f\x11\xbe\x07\x48\x0e\x45\xe2\x36\x3e\xd4\x46\x03\x03\x39\x14\x05\x41\x88\x6b\x8b\x08\x4d\x3a\x14\x15\xc1\x60\xf9\xee\x05\x7f\x64\x53\xb2\x2c\x9f\xcc\x9d\xd9\xd9\xd9\x5d\x52\x1a\x5b\xd5\xe9\x1a\xa1\x64\xd4\x50\xa6\x0e\xe4\xa8\x24\x37\x4a\x97\x50\x32\x46\xac\x85\x6a\xcd\xc0\xb9\x12\x6c\x01\x20\xe9\x11\x61\xfc\x7b\x82\xd2\x93\x36\x1e\x71\xae\x2c\x00\xcc\xf9\x74\x87\xb4\xf3\x48\x24\x59\xfb\x00\x7c\x0f\xd5\x8e\x1e\x5a\x70\xce\xa7\xf9\x7f\xd3\xb4\xdf\xd6\x6a\x2a\x0f\x18\x89\xce\x95\xd6\x56\xce\x95\xff\x59\x8b\x92\x39\xf7\x27\x29\xa1\x64\x51\xe4\x88\x6d\x4b\x0f\x38\x16\x79\x7c\x5c\x6d\x77\x85\x37\xf0\x33\xc1\xce\x15\x3e\x04\x80\x6d\x4d\x05\x35\x5c\x49\x32\xa4\xe6\xfc\xed\xc9\x43\x6d\xb5\xba\xd0\x26\x0a\x05\xc0\x67\x87\xfa\x7c\x63\xdc\x67\xff\x0a\xc8\xdf\x50\xe4\x84\xcf\x0d\xd5\xb4\x36\xa8\x43\xbf\xc9\x78\xcf\x4d\x73\x29\x13\x5b\x18\x26\xb3\x51\x86\xef\xcf\x1b\xf5\x42\x0d\x8d\x88\x0c\x11\x22\x15\xf1\xbb\xca\x2b\xdd\x72\x47\x53\x49\x92\x52\x19\xa8\xde\x30\xca\xac\xa5\x41\xfd\x45\x45\xf5\x03\x4d\x64\xe9\x84\x10\x9e\xa0\x20\xff\x7f\xc8\x07\x14\x2d\x2e\xd1\xbc\x8b\xfb\xd2\x73\x6e\x92\xe9\x6f\x1d\xe3\x66\xd4\x1f\x0d\x11\xb8\xed\x2f\xa3\xde\x6d\x6f\xc7\x8f\xa8\x3a\xf3\x7a\xad\x6d\x62\x84\x34\xa3\xfd\xdc\xb4\x35\x4f\x0b\xb7\xf6\x46\x72\xb6\x9d\xb5\xac\x45\xc7\xf0\x7a\xa1\x79\x0c\x90\xfc\x62\x47\xc5\x9c\xba\xa0\xf8\x86\x9f\x1d\xd7\xf8\xbd\x13\xe2\x9d\x4b\xa6\xfa\x61\x01\x21\x4c\xf6\x9d\x10\xa4\x8f\xc0\xb0\x80\xd9\x84\xf9\xe9\x63\xff\xaa\x5a\xf3\x82\x82\x9e\xd3\xf8\xb1\x27\x8d\x6a\x0d\x61\x21\x96\x8f\x3f\xe3\x2e\x4f\x21\xec\x60\xf5\x45\x45\x17\x5e\xcb\x35\xe3\x21\xb1\xb2\x89\xe3\x85\x76\xad\x18\xeb\xcd\x09\x4c\x4b\xe6\xdf\x90\x46\x63\xdb\x28\xc1\xb2\x17\x14\x1f\xd6\x14\x31\xd7\xf3\x53\xf8\xa0\x8d\x8d\x6f\x3f\x32\xaf\x13\xb7\x00\xea\x63\xb4\xc4\x44\xbe\x70\xb3\x61\x8c\x55\xdf\xa9\x96\x5c\x1e\x96\xa4\xfb\x48\x19\xa4\xf3\x8c\x45\xfd\xea\x59\x73\xc3\x6b\x2a\x86\x78\x3d\x9c\xa3\xd0\x14\x1e\xa9\xcc\xee\x70\xee\x50\xb8\xe2\x5f\x00\x00\x00\xff\xff\xfd\xc2\x47\x39\x27\x06\x00\x00")

func tmplMonitorTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplMonitorTmpl,
		"tmpl/monitor.tmpl",
	)
}

func tmplMonitorTmpl() (*asset, error) {
	bytes, err := tmplMonitorTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/monitor.tmpl", size: 1575, mode: os.FileMode(436), modTime: time.Unix(1596741077, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplScreenboardTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\xd9\x52\xe4\x3a\x12\x7d\xe7\x2b\x14\xf5\x3c\x4d\x7f\x01\x0f\x34\xf4\x42\x04\x4c\x33\x14\x4d\xcf\x12\x13\x0e\x61\x67\xb9\x14\xd8\x56\xb5\x24\x17\x14\x35\xfe\xf7\x09\xed\x29\x97\xb7\xbe\x71\x2f\x2f\x94\xce\x49\x9d\xd4\x92\x4e\x6d\x02\x24\x6f\x45\x0e\x64\x55\x50\x45\x0b\x5e\x66\x32\x17\x00\xcd\x33\xa7\xa2\x58\x91\x55\x51\x64\xc7\x23\x39\xbf\x29\x48\xd7\xad\xc8\xf1\x8c\x10\xc5\x54\x05\xe4\x82\xac\x34\xfe\x68\x0a\x5d\xb7\x3a\x23\xe4\x78\xfc\x40\xd8\x86\x9c\x3f\x00\x2d\xbe\x37\xd5\x81\x74\xdd\x19\x21\x02\x68\x91\x71\x5d\xbc\x20\xba\x46\xca\xea\x3a\xd0\x14\xb1\xa0\x05\xd6\x5b\x2a\xc0\x61\xd2\xfe\xb6\x75\x31\x31\x58\xf3\x11\xea\x5d\x45\x15\x3c\x51\xc1\xe8\x73\x05\x32\xd2\xaf\x4c\x6d\x27\x0d\x04\x6d\x4a\x20\xe7\x16\x50\xce\x2e\xdb\x3b\x43\xd3\x75\x42\x1a\x5a\x83\xfe\xef\xba\xff\x77\x5d\xb4\xbd\x27\x64\x27\x60\xc3\xde\x02\x77\x6f\x8b\x9e\x2d\x60\x43\xdb\x4a\x79\xf6\xda\x15\x2d\x3d\xd8\xa1\xa1\x42\xd2\x99\x9f\xac\x28\x41\x8d\x75\xe1\xd5\xb0\xae\xdd\xea\xb0\x8b\x73\xa6\x7f\xfb\x66\xbd\x79\xf4\x9f\x01\x3a\x78\xe8\x5f\x01\x0a\xe3\xeb\xa6\xdb\x6a\x9e\x04\xc2\x23\xbc\xa9\xa4\x4e\xe8\x42\x4f\xe2\xb2\x62\x65\x93\xe8\x64\xd4\x40\x58\xcd\x1b\xcd\xcb\xad\xd9\x7b\xda\xaa\x4c\x6a\x04\x8b\x39\x93\x49\xad\x6f\xc0\xca\xad\xf2\xe8\xd6\x96\x9c\x48\xe0\x26\x15\x7e\xb2\x42\x6d\x3d\xf8\x6a\x0a\xae\xbe\x67\xa6\x3b\x63\xc7\xcf\xf6\x43\xff\xf6\x3d\x58\x30\xae\x57\xbc\xe2\xc2\x83\xb9\x29\xb8\xda\x9e\x99\x19\xc7\x1a\x30\xe6\x3e\x17\x84\x2a\xfd\xdb\x46\x13\x21\x15\xdb\x43\x26\x77\x34\xcc\xd8\x2d\xdb\xc3\x5a\x97\xbd\x9f\x6e\xcc\xdb\xa0\xf3\x0a\xae\x61\x33\xe4\x3f\x21\x14\xab\x20\x2b\x60\x13\x9a\xe1\x05\x9e\xd8\xbb\xb7\x21\x64\xcf\xde\x7d\xab\x2c\xbe\x42\xd6\xc8\x3b\x1a\xbb\x56\x2a\x5e\xff\x68\x98\x8a\x5c\x6e\xb0\xac\xd5\xa0\x1f\x48\x6c\x36\x2b\x7a\xd9\x2a\x2e\x73\x1a\xbf\x17\x42\x68\x80\x9c\x22\xb6\x99\x15\xd4\x51\x90\x7c\x38\x36\x48\x7a\x5f\x0e\x32\x9a\x55\x7c\x80\x5f\x2d\x48\x9f\x41\xd2\xa1\x1f\xe6\x92\x0c\xa3\xff\x84\x35\x0b\x33\x12\xc5\xff\xd1\x82\x38\x44\x43\x42\x7e\xf9\x36\x7a\x66\x95\xd4\x49\x5a\x88\x7a\x6d\xb3\x55\xc0\x47\x33\xd9\x8c\x8e\x71\xda\x17\xfb\xa5\xc1\x0c\x4b\x62\xb3\x45\xba\x77\xa0\x04\xcb\x31\x53\x5b\xc4\x09\x06\x7e\x59\x6f\xe1\x4d\x7d\x61\x95\x02\x91\xf4\x59\x4f\xf3\xc6\xc2\x68\x9e\x83\xe1\x22\xe9\x5b\x56\xe3\xf8\xd6\xdf\x70\x1d\x63\xdb\xb3\x8b\xa4\x2e\xcb\x52\x40\x49\x15\x4f\x5a\x49\x23\xea\xc3\x1b\xdb\x2d\x52\xbe\xe2\xf5\x8e\x0a\x78\xe4\x98\xcc\x2d\x98\x29\x1e\x53\x5a\x34\x5b\xa6\xbb\xd5\x81\xdb\x9f\xfe\xdc\xa0\xc9\xfc\x27\x86\x8b\xa4\xbf\x8b\x02\xc4\xa7\x24\xd2\xb9\x86\xb2\xe7\xb0\x90\x46\x93\xe5\x8a\xd7\x4c\x9c\x4a\x16\x4c\x24\x9a\xd6\x68\x91\xe8\xe7\x37\x25\xe8\x15\xaf\x30\x07\x1a\xcb\x72\x5e\x79\x51\x64\xb4\x48\xf4\xa6\xc9\x05\x50\x09\x5f\x39\x4f\x78\xe6\xf0\xac\xd4\x84\x13\xef\x19\x2f\x8c\x87\xa6\x60\x8a\xf1\x86\x56\x5f\xb8\xa8\x29\xce\x47\x38\x5b\x0d\xd8\x7d\xe8\x19\x9e\xa4\x2e\x1d\x58\xa1\x56\xb6\x31\xd5\x50\x1e\x1b\x59\x5a\x7d\xcd\xd1\x05\x76\xb4\x4f\x51\xf0\x9e\x56\xa0\x14\xa4\xe4\xce\x81\x7e\xfb\x18\x6c\x16\xcb\xda\xaf\xa2\xff\x59\xfa\xef\x07\x7f\x98\x89\xe5\x62\xfd\x9b\x66\x0f\x42\xa5\x1c\xb3\x58\x98\x62\x67\xb1\x58\xf3\x89\x56\x6d\x6f\x20\xf6\x06\xf2\x2b\xb8\xe3\x97\x37\xb2\xa6\x25\xfc\x78\xb8\xed\x35\x53\xa3\x59\x2b\x42\xa4\x23\xb3\x19\xe9\x6e\x2e\x4e\x97\x41\xe6\x60\xa3\x0e\x15\x0c\x07\xf0\x09\x25\x0d\x70\x31\x18\x90\x7f\x51\xfc\xf4\xd3\xe3\xcc\x62\x3b\xa3\x96\xec\x85\xed\xdf\xc4\x8e\x78\x7c\xf8\xc9\xc7\x8f\x66\x2c\xfe\xe0\x98\x3f\xd2\xd2\xae\x93\x49\xe6\x50\xb4\x74\x0b\xaa\x24\x17\xe4\x3f\xc7\xa3\xcb\x0e\xd1\xba\xeb\x56\xc7\xe3\x79\xd7\xad\xfe\x76\x3c\x42\x53\x74\xdd\x7f\xc7\xbd\xe9\x36\xba\x8d\xd0\xd4\x96\x6b\x1e\x30\x89\x7a\x0f\x4d\x92\xbe\x62\x90\x0c\x52\x27\x79\x0d\xb4\x15\x8a\x9b\xd1\x7d\x97\x6e\xb6\x31\xee\x35\xe9\xc3\x49\x23\x87\x91\x5e\xc3\xef\xa8\x78\x49\x86\x39\x36\x7c\x90\x3a\x69\x78\x6d\xac\x06\xb6\x92\x7f\xd6\x1e\xf0\x96\x3e\x43\xb2\x00\x56\x06\xf0\x5b\x20\xc7\x2e\x92\x3a\xc9\x5b\x33\x59\x6b\x30\x66\x86\x06\x7f\x71\xc4\x68\x01\x7f\x20\x3a\x1b\xe0\x27\xce\x98\xc9\x79\x59\xef\x2d\x93\xe3\x72\x34\x98\x3c\x31\xe2\xe3\x12\x3e\x25\x25\xe7\xa3\x91\xba\xf7\x02\x72\x26\x19\x0f\x47\x99\x5d\x00\xe2\xed\x49\xb0\x98\x3d\x33\xa7\xd7\x09\x0b\xce\x44\x23\x5a\x5f\x78\x93\x8c\xcd\x86\x37\xe9\xd8\x20\x83\x49\xa1\xcb\x0a\x84\xba\xb9\xf6\x30\xd5\xc5\x8c\x85\x9d\x50\xa4\xa7\x55\x5a\xc5\x1f\x60\x23\x40\x86\x3c\xaa\x4f\x90\x99\x70\x18\x3a\x44\x46\xb3\x49\xc5\x5b\x28\x11\x5a\xd9\x92\x0f\x7f\xcf\x2d\x50\xc0\x83\x64\x55\x92\x61\x4a\x8c\x26\xe5\x92\x43\xa2\x39\x8d\x0d\x27\xab\xb1\x18\x8c\xeb\x3c\x5a\xdb\xf1\xb2\x3e\x76\x5b\xb2\x85\xfc\x25\xdc\x96\x98\x42\x38\x00\x58\x66\xb2\xfa\x57\xc1\xdb\x1d\x6b\x4a\x8f\x97\xbe\xec\x44\x10\x3f\xaf\x93\x88\x24\x0a\xf3\x97\x36\xf9\xcb\x3d\x97\xf1\x7a\x24\x7f\xc9\x76\x5c\xc6\x8b\x2f\x4f\xcf\xaa\x7c\x2e\x4a\x48\x64\x40\x03\x48\xc7\x19\x4c\xdf\x9f\x3d\xde\x85\xe9\xd8\xaa\x3a\xcc\x87\xc3\x67\x1b\x81\x1b\x80\x7d\xcf\xd5\xfd\x54\xe6\x78\x87\xfe\x5c\x26\xbb\xf3\xc8\x4e\x8a\x98\xb5\x15\xc7\xb5\x49\xce\x49\x58\x63\x93\x49\xad\x35\x7b\x47\xc1\x21\x6d\xc9\x89\x04\x6e\x52\xe1\x8e\x8a\x92\x85\x94\x56\xdb\x92\xbf\x51\xf0\xdc\x74\x7f\x9a\x7d\xe8\x49\xb3\x0f\x5d\x30\xe8\x74\xe3\x41\xec\x59\x0e\xee\x5f\xe8\x84\x2d\x66\xee\x7f\xe8\x4d\xdf\x78\x89\xb4\xbb\x35\x4f\x74\xcd\xc5\x7a\x2a\x9a\x5c\xae\x8f\x8f\x34\x3c\x81\xc0\x4b\x89\x9e\xb1\x6c\xef\xb0\x38\xe8\xc8\x6c\x3a\xc1\xd1\x03\x6f\x55\x4f\xb3\x32\x60\x5f\xb5\x6f\x3a\x3d\xa3\xad\x54\xeb\x2d\x7f\xfd\xc6\xe2\x19\xb6\x6e\xa5\xca\xe4\x96\xbf\x66\x5b\x8d\xfa\xf9\x4d\x2d\x17\xa9\x7e\x16\x82\x8b\x01\x5d\xb0\x78\x4f\x39\x58\x2f\xd2\xbe\xa5\x0a\x9a\xfc\x70\x2a\x5e\x39\xa2\xa7\x1e\xed\x17\xc9\x7f\x12\x40\x5f\x0a\xfe\xda\x9c\x3a\x78\x0e\x54\xcf\x05\xae\xb3\xc8\xc9\x35\x93\x4a\xb0\xe7\x56\xa1\x49\x8d\x7e\x0a\xcc\xf6\x5c\xf5\x6a\x2e\xf2\xf6\xe0\x1e\xd5\x6e\x99\x54\xa7\xde\xfc\x93\x5b\x56\x69\xba\xe7\xae\x57\x75\xd2\xdd\x35\x93\xbb\x8a\x1e\xec\x85\x87\x27\x0b\x0b\xfa\xfb\x0c\xff\xdc\xd4\x33\x9d\x7f\x4a\xb8\x17\xb0\x01\x01\x4d\x4c\x01\x26\x8d\x66\xbb\x88\xe3\xeb\x8f\xc4\x7c\x7a\x95\x60\x05\xfc\x1b\x04\xbf\xe2\x6d\x13\x3f\x85\x2d\x2b\x20\x7b\x07\xc1\xb3\xdc\xe2\x7e\xed\xe8\x5b\xcf\xa4\xcd\x86\x96\xb0\x56\x54\xb5\x52\x8f\x66\xf2\x5e\x55\x1b\x32\x93\x86\xb5\x53\x91\x3c\x61\x8d\x55\x5e\xec\x11\xbf\x81\x0d\x78\xb4\x2f\x53\xf8\x5d\x67\xac\xf2\xef\x79\xc4\x8b\xd6\x90\x47\xbc\x84\x8d\x55\xfe\x3d\x8f\xc9\x7e\x7b\xc8\x65\xb2\xfd\x1e\xad\x3e\x7d\x44\xa0\x82\xd6\x12\xa3\xf6\x28\x99\xe2\x3b\x5b\xea\xbf\x07\xad\x39\xbe\xa7\x92\x3c\xde\x50\x39\x66\xd1\x63\x4b\x44\x47\x1f\xe3\x26\x14\x4c\xc4\x46\xd8\x84\x75\xfc\x64\x2c\x37\x2b\xb2\x56\x34\xe9\x89\x29\xfa\xae\x38\x6e\x44\x64\xf4\x14\x38\xfc\xc5\xb7\x75\x23\xd1\x97\x6e\x8a\xf6\xd5\xdd\x93\xff\x23\x20\x73\xba\x83\xab\x2d\x15\x34\xc7\x37\x2a\x63\x4b\x29\x2f\x25\x84\xd6\x57\xb6\xe4\xd7\x4e\xcf\x0d\x04\x81\x3e\xd9\xda\xd7\xeb\x89\x97\xf0\xee\xec\xff\x01\x00\x00\xff\xff\x8a\x1e\x80\x8f\xbb\x20\x00\x00")

func tmplScreenboardTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplScreenboardTmpl,
		"tmpl/screenboard.tmpl",
	)
}

func tmplScreenboardTmpl() (*asset, error) {
	bytes, err := tmplScreenboardTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/screenboard.tmpl", size: 8379, mode: os.FileMode(436), modTime: time.Unix(1594064150, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplTimeboardTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xc9\x6e\xdb\x3c\x10\xbe\xfb\x29\x06\x42\x0e\xff\x0f\xc4\x7e\x80\x02\x3e\xa4\x09\x1c\x14\xe8\x92\x26\x41\x7a\x28\x0a\x81\x96\x46\x0a\x51\x6a\x09\x45\x25\x71\x08\xbe\x7b\xc1\xe1\x26\xdb\x8a\x7b\xa8\x4f\x9c\xf9\xbe\x59\x39\x43\x4b\xe2\xd0\x8d\xb2\x40\xc8\x4a\xa6\x58\xd9\xd5\xb9\xe2\x0d\x6e\x3b\x26\xcb\x57\xf7\xcb\x20\x2b\xcb\x5c\x6b\x58\x7d\x2a\xc1\x98\x0c\xf4\x02\x40\x71\x25\x10\xdc\x6f\x0d\x99\x45\xef\x49\x65\x4c\xb6\x00\x28\x71\x28\x24\xef\x15\xef\xda\x00\x5f\x4d\x54\x8e\x24\x91\x95\x79\xd7\x8a\x1d\xf9\xb0\x9c\x5b\x64\xe5\x37\xab\x58\x1a\xb3\x00\xd0\xfa\x85\xab\x47\x58\x5d\x4b\xd6\x3f\x0e\x51\x29\x59\x5b\x23\xac\x80\xc4\xda\x62\x94\x52\x48\x6a\x26\x9d\xe4\xea\x0a\x2b\xde\x72\x4a\xc2\xb9\x03\x78\xe6\x6f\xa9\x88\x07\xfe\x66\x81\x60\xb4\x04\x5e\xc1\xea\x62\x54\xdd\x50\x30\x81\x16\x62\x51\xf0\x26\x09\x35\x26\xb3\x26\xd8\x96\xde\x75\x70\x70\x23\xb1\xe0\x83\x0f\xda\x47\xc1\x3b\x48\xe8\xbb\x0e\xae\x65\x37\xf6\xd4\x81\xda\x9e\x60\x0d\x3f\xb5\x3e\xab\x9d\xf6\xc3\x3a\x10\x8c\x09\xdd\x39\xe3\x6d\x89\xaf\xe7\x70\x86\x02\x9b\x03\x06\xaf\x3c\x6c\xcc\xb9\xd6\x14\x2c\xd3\x9a\x98\x74\x22\xcd\xaf\xf9\x44\xee\x8a\xae\x47\x4a\x64\xb0\x27\x9f\xc8\xe0\xb4\x36\x8c\x23\x9c\x4a\x24\x31\xfe\x29\x11\xb5\x73\xf7\x41\xda\x81\xa4\xb5\x9f\x03\x80\x9e\x09\x54\x0a\xf7\xe6\x93\x2c\x56\x37\x1e\x09\x77\x1c\xb9\x79\x25\x78\x3f\xcb\xdd\x58\x20\xf0\xcd\x7c\x3a\x5f\x98\xfc\x8d\x92\x1a\x63\x55\x6e\xd8\xf6\x94\x7e\x6a\xbd\x5d\x43\x50\xcc\x57\xed\x7a\x4c\x8b\x64\x85\x94\xdf\x33\x13\x63\x1c\xb6\x07\x12\x12\xa8\x35\x85\xff\xcc\xb6\x28\x6c\x1c\x41\x07\x4f\x76\xda\xa3\xa1\x4a\x25\x1c\x1f\x62\x51\xae\x82\x5b\x7c\x1a\x71\x50\xb3\x25\x48\x87\xc5\x1a\x9e\x26\xbd\xfe\x3e\xa2\xdc\xa5\x45\x8a\x79\x52\x69\x4b\x63\xa8\xde\x83\x72\xb5\xb6\x29\x80\xf7\x1e\x4d\x2e\xea\x5a\x62\xcd\x54\x27\x5d\x12\x56\xd9\x22\x64\x19\xfc\x77\x85\xb7\x58\xdd\x29\xc9\xdb\x7a\xca\xfb\x9f\xd6\x34\x99\x85\x3d\x4d\x9a\x18\x8d\x1c\xda\xa8\xcb\xc3\xb0\x71\xbe\xb4\xf6\xbd\x70\x9a\xc8\x3b\x1c\x39\x6b\x49\xbb\xee\x07\xcc\x6e\xba\x3f\x86\x3d\x4f\xa3\xb7\xdf\xef\x64\xfc\x83\x97\xea\xd1\x9a\xbe\xd0\xc1\x1b\x3a\xed\x09\xb3\xd3\x6d\xdd\xb7\x99\xd4\xe9\x0b\x0f\xad\x88\x80\x1b\xe9\xcb\xae\x2d\xe9\xa5\x64\x62\xd3\xc9\x86\xa9\x01\xa6\xc3\xfd\x2e\x1c\x9e\xe7\xd4\xd2\x22\x51\xf3\x8a\xb8\x7b\x5d\x83\x69\xdb\x4e\x77\x6d\x7f\x42\xac\xe7\xa6\x67\x72\x7a\xcb\x97\x49\x93\xa6\x2f\x15\x15\xf6\x67\x7e\xa9\x8e\x03\xc4\x66\x8c\x83\xea\x9a\x8f\xf5\x65\x27\xc8\x73\x41\x72\xbe\xad\xf3\x82\x34\x21\xfa\x01\xed\xaf\x1e\x37\x87\x1e\xab\x59\x8f\x9b\xf7\x3d\x4e\xaf\xcd\x01\x73\xa7\x45\xa2\x1e\xef\xfa\xbc\x64\xfc\x03\x3c\xd5\xa5\xeb\xbf\xc7\xa6\x17\x4c\xe1\x03\x93\x9c\x6d\x05\xc6\xa7\x6f\xf2\xef\x6c\xbf\x13\x3c\x2d\x7f\xf6\x3c\x7f\xf3\x2d\x6b\x70\xf2\x5e\x7c\xb5\x62\xb8\xaf\x5e\x62\xc5\x5f\x61\xf2\xf7\x68\xc5\x80\x96\x58\xb1\x51\xa8\xf4\x59\xe1\x44\x07\x1f\xe7\x6c\x16\x8b\x3f\x01\x00\x00\xff\xff\x17\xc0\x0c\xf4\xe3\x08\x00\x00")

func tmplTimeboardTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplTimeboardTmpl,
		"tmpl/timeboard.tmpl",
	)
}

func tmplTimeboardTmpl() (*asset, error) {
	bytes, err := tmplTimeboardTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/timeboard.tmpl", size: 2275, mode: os.FileMode(436), modTime: time.Unix(1594175251, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/dashboard.tmpl": tmplDashboardTmpl,
	"tmpl/monitor.tmpl": tmplMonitorTmpl,
	"tmpl/screenboard.tmpl": tmplScreenboardTmpl,
	"tmpl/timeboard.tmpl": tmplTimeboardTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"dashboard.tmpl": &bintree{tmplDashboardTmpl, map[string]*bintree{}},
		"monitor.tmpl": &bintree{tmplMonitorTmpl, map[string]*bintree{}},
		"screenboard.tmpl": &bintree{tmplScreenboardTmpl, map[string]*bintree{}},
		"timeboard.tmpl": &bintree{tmplTimeboardTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

